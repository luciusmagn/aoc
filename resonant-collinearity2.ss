(library-directories '("."))
(import (chezscheme)
        (utils))

(define (is-antenna? c)
  (or (char-alphabetic? c)
      (char-numeric? c)))

(define (find-antennas matrix)
  (let* ((enumerated (matrix-enumerate matrix))
         (antennas (filter (lambda (p) (is-antenna? (cdr p))) enumerated)))
    (group-by cdr antennas)))

(define (collinear? p1 p2 p3)
  (let* ((x1 (car p1)) (y1 (cdr p1))
         (x2 (car p2)) (y2 (cdr p2))
         (x3 (car p3)) (y3 (cdr p3))
         (area (- (* (- y2 y1) (- x3 x1))
                  (* (- y3 y1) (- x2 x1)))))
    (= area 0)))

(define (antenna-pairs positions)
  (flat-map (lambda (p1)
              (map (lambda (p2) (cons p1 p2))
                   (cdr (memq p1 positions))))
            positions))

(define (pair->antinodes pair point)
  (collinear? (car (car pair))
              (car (cdr pair))
              point))

(define (find-antinodes positions rows cols)
  (if (< (length positions) 2)
      (map car positions)
      (let ((pairs (antenna-pairs positions)))
        (filter (lambda (point)
                  (any (lambda (pair) (pair->antinodes pair point))
                       pairs))
                (grid-points rows cols)))))

(define (main input)
  (let* ((lines (read-lines input))
         (matrix (map string->list lines))
         (rows (length matrix))
         (cols (length (car matrix)))
         (antennas (find-antennas matrix))
         (antinode-finder (lambda (freq-group) (find-antinodes (cdr freq-group) rows cols)))
         (all-antinodes (flat-map antinode-finder antennas))
         (unique-antinodes (unique all-antinodes)))
    (display (length unique-antinodes))
    (newline)))

(main "resonant-collinearity.input")
