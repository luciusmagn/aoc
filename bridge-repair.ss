(library-directories '("."))
(import (chezscheme)
        (utils))

(define (evaluate nums ops)
  (let loop ((result (car nums))
             (rest-nums (cdr nums))
             (rest-ops ops))
    (if (null? rest-ops)
        result
        (loop (if (eq? (car rest-ops) '+)
                  (+ result (car rest-nums))
                  (* result (car rest-nums)))
              (cdr rest-nums)
              (cdr rest-ops)))))

(define (generate-ops len)
  (let ((cons-plus  (lambda (r) (cons '+ r)))
        (cons-minus (lambda (r) (cons '- r))))
    (if (= len 0)
        '(())
        (append (map cons-plus (generate-ops (- len 1)))
                (map cons-minus (generate-ops (- len 1)))))))

(define (find-results equation)
  (let* ((target (car equation))
         (operands (cdr equation))
         (ops-needed (- (length operands) 1))
         (possible-ops (generate-ops ops-needed)))
    (if (any (lambda (ops) (= target (evaluate operands ops))) possible-ops)
        target
        0)))

(define (main input)
  (define (parse line)
    (cons (string->number (car line))
          (strlist->numberlist (split-whitespace (cdr line)))))
  (let* ((lines          (read-lines input))
         (split-ops      (map (lambda (s) (string-split-first s #\:)) lines))
         (number-lines   (map parse split-ops))
         (results        (map find-results number-lines))
         (total          (sum results)))
    (display total)))

(main "bridge-repair.input")
